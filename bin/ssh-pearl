#!/usr/bin/env bash
#
# This file is part of Pearl (https://github.com/fsquillace/pearl-ssh).
#
# Copyright (c) 2008-2015
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU Library General Public License as published
# by the Free Software Foundation; either version 2, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

SELF="$(basename "$0")"
LIBNAME='ssh_pearl.sh'


# Resolves the real (non-linked) location of the node.
#
# @param   {string}  node      full path to the file whose real location we're after.
#
# @returns {string}  full path to the node's real location (minus node name).
function resolve_real_path() {
    local src dir

    src="$1"

    [[ "$#" -ne 1 ]]   && { echo -e "exactly 1 arg (node location) required. abort." "$FUNCNAME"; return 1; }
    [[ -z "$src" ]] && { echo -e "node argument has to be a non-empty string." "$FUNCNAME"; return 1; }
    [[ -e "$src" ]] || { echo -e "node argument has to be an existing file." "$FUNCNAME"; return 1; }

    while [[ -h "$src" ]]; do  # resolve $src until the file is no longer a symlink
        src="$(readlink -- "$src")"
        if [[ "$src" != /* ]]; then
            dir="$(cd -P -- "$(dirname -- "$src")" && pwd)"
            src="$dir/$src"  # if $src was a relative symlink, we need to resolve it relative to the path where the symlink was located.
        fi
    done

    echo "$(cd -P -- "$(dirname -- "$src")" && pwd)"
}

source "$(resolve_real_path "$0")/../lib/$LIBNAME" || exit 1

ssh_pearl __SCRIPT_INVOCATION__ "$@"
